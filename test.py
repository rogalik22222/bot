import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext
from report_handler import date_from_report, date_to_report, nicknames_report, cancel_report
from online_handler import (
    check_start as online_check_start,
    date_from as online_date_from,
    date_to as online_date_to,
    nicknames as online_nicknames,
    online_cancel,
)
from trade_handler import (
    check_start as trade_check_start,
    date_from as trade_date_from,
    date_to as trade_date_to,
    nicknames as trade_nicknames,
    cancel as trade_cancel,
)
from check_handler import get_conversation_handler, check_start as c_start
from account_handler import accountc_handler, account_start, NICKNAMES
from accountban_handler import accountcc_handler, account_start as a_start
from database import init_db, add_user, get_user_role, update_user_role, get_all_users, delete_user
from dostups import tech_d, admin_d, full_d, registered_d, sled_d, developer_d
import sqlite3
from config import *


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

logger = logging.getLogger(__name__)

DATE_FROM, DATE_TO, NICKNAMES, SERVER, NICKNAME, DELETE_USER = range(6)


async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await start(update, context)
    return ConversationHandler.END


async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    role = get_user_role(user_id)

    if not role:
        await update.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    elif role == "removed":
        await update.message.reply_text(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
        )
        return

    reply_keyboard = [
        ["–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞"],
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏üîó", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ü§ë"],
        ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–∏–Ω–∫–∏ü§°", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£"],
        ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîß"],
        ["/cancel"],
    ]

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
    if role == "sled":
        reply_keyboard = [["–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞"], ["/cancel"]]
    elif role == "admin":
        reply_keyboard = [
            ["–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞"],
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏üîó", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ü§ë"],
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–∏–Ω–∫–∏ü§°", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£"],
            ["/cancel"],
        ]
    elif role == "developer":
        reply_keyboard = [
            ["–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞"],
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏üîó", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ü§ë"],
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–∏–Ω–∫–∏ü§°", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£"],
            ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîß"],
            ["/cancel"],
        ]
    elif role == "registered":
        reply_keyboard = [["–ß—ë —Å–º–æ—Ç—Ä–∏—à—å, –ø–æ–∫–∞ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞"]]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )


async def register_start(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    role = get_user_role(user_id)

    if role == "registered":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
    if role is not None:
        await update.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à Nick_name:")
    return NICKNAME


async def register_nickname(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    role = get_user_role(user_id)

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if role == "registered":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    nickname = update.message.text
    context.user_data["nickname"] = nickname

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –æ—Ç 1 –¥–æ 7:")
    return SERVER


async def register_server(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    role = get_user_role(user_id)

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if role == "registered":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    server = update.message.text
    nickname = context.user_data.get("nickname")

    try:
        add_user(user_id, nickname, "registered", int(server))
        logging.info(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except sqlite3.IntegrityError:
        await update.message.reply_text(
            f"–í–∞—à –Ω–∏–∫:{nickname},–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:{server}"
        )

    await start(update, context)
    return ConversationHandler.END


async def manage_accounts(update: Update, context: CallbackContext) -> None:
    reply_keyboard = [
        ["–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
        ["–ù–∞–∑–∞–¥"],
    ]

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )


async def list_pending_users(update: Update, context: CallbackContext):
    pending_users = get_all_users()  # Fetch users with 'registered' status
    pending_users = [user for user in pending_users if user[2] == "registered"]

    if not pending_users:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    for user in pending_users:
        await update.message.reply_text(
            f"User ID: {user[0]}\nNickname: {user[1]}\nServer: {user[3]}",
            reply_markup=ReplyKeyboardMarkup(
                [[f"–û–¥–æ–±—Ä–∏—Ç—å {user[0]}", f"–û—Ç–∫–∞–∑–∞—Ç—å {user[0]}", "–ù–∞–∑–∞–¥"]],
                one_time_keyboard=True,
            ),
        )


async def approve_user(update: Update, context: CallbackContext):
    user_id = int(context.matches[0].group(1))
    if get_user_role(update.message.from_user.id) != "developer":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    update_user_role(user_id, "sled")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å 'sled'."
    )


async def reject_user(update: Update, context: CallbackContext):
    user_id = int(context.matches[0].group(1))
    if get_user_role(update.message.from_user.id) != "admin":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    update_user_role(user_id, "removed")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å 'removed'."
    )


async def delete_user_start(update: Update, context: CallbackContext):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return DELETE_USER


async def delete_user_main(update: Update, context: CallbackContext):
    user_id = int(update.message.text)
    try:
        delete_user(user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    return ConversationHandler.END


async def list_users(update: Update, context: CallbackContext) -> None:
    users = get_all_users()
    response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        response += f"ID: {user[0]}, Nickname: {user[1]}, Role: {user[2]}, Server: {user[3]}\n"
    await update.message.reply_text(response)


async def change_role(update: Update, context: CallbackContext) -> None:
    if get_user_role(update.message.from_user.id) != "admin":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    try:
        user_id, new_role = context.args
        user_id = int(user_id)
        update_user_role(user_id, new_role)
        await update.message.reply_text(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
    except ValueError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change_role <user_id> <new_role>")


async def back_to_main(update: Update, context: CallbackContext) -> None:
    await start(update, context)


def main() -> None:
    init_db()

    application = Application.builder().token(API_KEY).build()

    report_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ$") & admin_d, date_from_report)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_from_report)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_to_report)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, nicknames_report)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    online_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞$") & developer_d, online_check_start)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, online_date_from)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, online_date_to)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, online_nicknames)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    trade_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ü§ë$") & full_d, trade_check_start)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_date_from)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_date_to)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_nicknames)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    register_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_nickname)],
            SERVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_server)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    delete_user_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$") & full_d, delete_user_start)],
        states={
            DELETE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_user_main)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )


    accban_handler = accountcc_handler()
    check_handler = get_conversation_handler()
    account_handler = accountc_handler()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list_users", list_users, filters=full_d))
    application.add_handler(CommandHandler("change_role", change_role, filters=full_d))
    application.add_handler(register_handler)
    application.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_main))
    application.add_handler(MessageHandler(filters.Regex("^–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîß$") & full_d, manage_accounts))

    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫$"), list_pending_users)],
        states={},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    application.add_handler(MessageHandler(filters.Regex("^–û–¥–æ–±—Ä–∏—Ç—å (\d+)$") & full_d, approve_user))
    application.add_handler(MessageHandler(filters.Regex("^–û—Ç–∫–∞–∑–∞—Ç—å (\–¥+)$") & full_d, reject_user))

    application.add_handler(delete_user_handler)

    application.add_handler(report_handler)
    application.add_handler(online_handler)
    application.add_handler(trade_handler)
    application.add_handler(check_handler)
    application.add_handler(account_handler)
    application.add_handler(accban_handler)

    application.run_polling()



if __name__ == "__main__":
    main()

