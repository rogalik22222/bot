import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler, CallbackContext
from report_handler import date_from_report, date_to_report, nicknames_report, cancel_report
from invite_handler import *
from online_handler import (
    check_start as online_check_start,
    date_from as online_date_from,
    date_to as online_date_to,
    nicknames as online_nicknames,
    online_cancel,
)
from trade_handler import (
    check_start as trade_check_start,
    date_from as trade_date_from,
    date_to as trade_date_to,
    nicknames as trade_nicknames,
    cancel as trade_cancel,
)
from check_handler import get_conversation_handler, check_start as c_start
from account_handler import accountc_handler, account_start, NICKNAMES
from accountban_handler import accountcc_handler, account_start as a_start
from database import init_db, add_user, get_user_role, update_user_role, get_all_users, delete_user, get_server
from dostups import *
import sqlite3
from config import *
from accountban_handler import accountcc_handler, account_start as acc_start
from uval_handler import *
from gospay_handler import check_start as gos_start, date_from_gos,  date_to_gos, get_fraction, FRACTION
import logging
import sys
from get_log import send_file
# Initialize logging configuration
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8', mode='w'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)



DATE_FROM, DATE_TO, NICKNAMES, SERVER, NICKNAME, DELETE_USER , ROLE_USER_ID, ROLE_NEW_ROLE, TELEGRAM_USER  = range(9)

async def log_button_press(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logging.info(f"User {user.username} ({user.id}) pressed button: {update.message.text}")

async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    if not role:
        await update.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    elif role == "removed":
        await update.message.reply_text(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
        )
        return

    reply_keyboard = [
        ["–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ü§ñ", "–î–ª—è —Å–ª–µ–¥—è—â–∏—Ö‚ò†Ô∏è"],
        ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîß"],
        ["–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£$"],
    ]

    if role == "sled":
        reply_keyboard = [
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏üîó", "–î–ª—è —Å–ª–µ–¥—è—â–∏—Ö‚ò†Ô∏è"],
        ]
        reply_markup = ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        )

    elif role == "admin":
        reply_keyboard = [
            ["–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ü§ñ", "–î–ª—è —Å–ª–µ–¥—è—â–∏—Ö‚ò†Ô∏è"],
            ["–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîê"],
        ]
        reply_markup = ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        )

    elif role == "tech":
        reply_keyboard = [
            ["–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ü§ñ", "–î–ª—è —Å–ª–µ–¥—è—â–∏—Ö‚ò†Ô∏è"],
        ]
        reply_markup = ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        )

    elif role == "developer":
        reply_keyboard = [
            ["–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ü§ñ", "–î–ª—è —Å–ª–µ–¥—è—â–∏—Ö‚ò†Ô∏è"],
            ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîß", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£"],
            ["–í—ã–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤üìñ"],

        ]
        reply_markup = ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        )
    elif role == "registered" or not role:
        reply_keyboard = [["/start"]]
        reply_markup = ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        )

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
    )

async def register_start(update: Update, context: CallbackContext) -> int:
    await log_button_press(update, context)
    user_id = update.message.from_user.id
    role = get_user_role(user_id)

    if role == "registered":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    if role is not None and role != 'removed':
        await update.message.reply_text(
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END
    elif role == 'removed' and role is not None:
        await start(update, context)
        return ConversationHandler.END

    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à Nick_name:")
    return NICKNAME

async def register_nickname(update: Update, context: CallbackContext) -> int:
    await log_button_press(update, context)
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    if role == "registered":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    nickname = update.message.text
    context.user_data["nickname"] = nickname
    await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –æ—Ç 1 –¥–æ 7:")
    return SERVER

async def register_server(update: Update, context: CallbackContext) -> int:
    await log_button_press(update, context)
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    telegram_id = update.message.from_user.username
    if role == "registered":
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await start(update, context)
        return ConversationHandler.END

    server = update.message.text
    nickname = context.user_data.get("nickname")
    try:
        add_user(user_id, telegram_id, nickname, "registered", int(server))
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nickname} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Å—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    except sqlite3.IntegrityError:
        await update.message.reply_text(
            f"–í–∞—à –Ω–∏–∫:{nickname},–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:{server}"
        )

    await start(update, context)
    return ConversationHandler.END

async def sled_button(update: Update, context: CallbackContext) -> int:
    await log_button_press(update, context)
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    if role in ['sled', 'tech', 'admin', 'developer']:
        reply_keyboard = [
            ["–£–≤–æ–ª—å–Ω–µ–Ω–∏—è —Å —Ñ—Ä–∞–∫—Ü–∏–∏‚úèÔ∏è", "–ü—Ä–∏–Ω—è—Ç–∏–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—éüö™", "–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å —Ñ—Ä–∞–∫—Ü–∏–∏üí∂"],
            ["/cancel", "–ù–∞–∑–∞–¥"],
        ]
        reply_markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        await start(update, context)
        return ConversationHandler.END

async def for_adm_acc_button(update: Update, context: CallbackContext) -> int:
    await log_button_press(update, context)
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    if role in ['admin', 'developer']:
        reply_keyboard = [
            ["–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫üóí", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë®‚Äçüë®‚Äçüëß‚Äçüë¶", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–øüîê"],
            ["–ù–∞–∑–∞–¥"],
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            )
        )
    else:
        await update.message.reply_text("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        await start(update, context)
        return ConversationHandler.END

async def for_account_button(update: Update, context: CallbackContext) -> int:
    await log_button_press(update, context)
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    if role in ['tech', 'admin', 'developer']:
        reply_keyboard = [
            ["–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞"],
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏üîó", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ü§ë"],
            ["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–∏–Ω–∫–∏ü§°"],
            ["/cancel", "–ù–∞–∑–∞–¥"],
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=False, resize_keyboard=True
            )
        )
    else:
        await update.message.reply_text("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")
        await start(update, context)
        return ConversationHandler.END
async def manage_accounts(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    role = get_user_role(user_id)
    if role == 'developer':
        reply_keyboard = [
        ["–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫üóí", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüö´", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë®‚Äçüë®‚Äçüëß‚Äçüë¶"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–øüîê"],
        ["–ù–∞–∑–∞–¥"],
        ]
    else:
        update_user_role(user_id, 'removed')
        await update.message.reply_text('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω –∑–∞ –ø–æ–ø—ã—Ç–∫—É —Å–ª–∏–≤–∞')

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False, resize_keyboard=True
        ),
    )

async def list_pending_users(update: Update, context: CallbackContext):
    pending_users = get_all_users()  # Fetch users with 'registered' status
    pending_users = [user for user in pending_users if user[2] == "registered"]

    if not pending_users:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    buttons = []
    for user in pending_users:
        buttons.append([
            InlineKeyboardButton(f"–û–¥–æ–±—Ä–∏—Ç—å {user[0]}", callback_data=f"approve_{user[0]}"),
            InlineKeyboardButton(f"–û—Ç–∫–∞–∑–∞—Ç—å {user[0]}", callback_data=f"reject_{user[0]}")
        ])

    reply_markup = InlineKeyboardMarkup(buttons)

    user_info = "\n\n".join([f"User ID: {user[0]}\nNickname: {user[1]}\nServer: {user[3]}" for user in pending_users])
    await update.message.reply_text(user_info, reply_markup=reply_markup)


# Callback for processing admin requests to approve or reject user roles
async def list_pending_users(update: Update, context: CallbackContext):
    pending_users = get_all_users()  # Fetch users with 'registered' status
    pending_users = [user for user in pending_users if user[2] == "registered"]

    if not pending_users:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    buttons = []
    for user in pending_users:
        buttons.append([
            InlineKeyboardButton(f"–û–¥–æ–±—Ä–∏—Ç—å {user[0]}", callback_data=f"approve_admin_{user[0]}"),
            InlineKeyboardButton(f"–û—Ç–∫–∞–∑–∞—Ç—å {user[0]}", callback_data=f"reject_admin_{user[0]}")
        ])

    reply_markup = InlineKeyboardMarkup(buttons)

    user_info = "\n\n".join([f"User ID: {user[0]}\nNickname: {user[1]}\nServer: {user[3]}" for user in pending_users])
    await update.message.reply_text(user_info, reply_markup=reply_markup)


# Callback for processing admin requests to change role
async def list_pending_users(update: Update, context: CallbackContext):
    pending_users = get_all_users()  # Fetch users with 'registered' status
    pending_users = [user for user in pending_users if user[2] == "registered"]

    if not pending_users:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    buttons = []
    for user in pending_users:
        buttons.append([
            InlineKeyboardButton(f"–û–¥–æ–±—Ä–∏—Ç—å {user[0]}", callback_data=f"approve_admin_{user[0]}"),
            InlineKeyboardButton(f"–û—Ç–∫–∞–∑–∞—Ç—å {user[0]}", callback_data=f"reject_admin_{user[0]}")
        ])

    reply_markup = InlineKeyboardMarkup(buttons)

    user_info = "\n\n".join([f"User ID: {user[0]}\nNickname: {user[1]}\nServer: {user[3]}" for user in pending_users])
    await update.message.reply_text(user_info, reply_markup=reply_markup)


# Callback for processing admin requests to change role
async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Answer callback query to stop the loading circle

    query_data = query.data
    user_id = int(query_data.split('_')[2])
    action = query_data.split('_')[1]
    role = query_data.split('_')[0]

    logger.info(f"Callback query data: {query_data}")
    logger.info(f"User ID: {user_id}, Action: {action}, Role: {role}")

    # Corrected role verification
    user_role = get_user_role(query.from_user.id)
    if user_role != "admin" and user_role != "developer":
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    # Handle admin role for user approval/rejection
    if role == "approve":
        update_user_role(user_id, "sled")
        await query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω.")
    elif role == "reject":
        update_user_role(user_id, "removed")
        await query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    # Update pending user list for admin actions
    pending_users = get_all_users()
    pending_users = [user for user in pending_users if user[2] == "registered"]

    if pending_users:
        buttons = []
        for user in pending_users:
            buttons.append([
                InlineKeyboardButton(f"–û–¥–æ–±—Ä–∏—Ç—å {user[0]}", callback_data=f"approve_admin_{user[0]}"),
                InlineKeyboardButton(f"–û—Ç–∫–∞–∑–∞—Ç—å {user[0]}", callback_data=f"reject_admin_{user[0]}")
            ])
        reply_markup = InlineKeyboardMarkup(buttons)
        user_info = "\n\n".join(
            [f"User ID: {user[0]}\nNickname: {user[1]}\nServer: {user[3]}" for user in pending_users])

        # Check if the new content is different before editing the message
        if query.message.text != user_info:
            await query.edit_message_text(user_info, reply_markup=reply_markup)
    else:
        await query.edit_message_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")

# Change role conversation handler implementation with admin role check
async def change_role_start(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    user_role = get_user_role(update.message.from_user.id)
    if user_role not in ["admin", "developer"]:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:")
    return ROLE_USER_ID

async def change_role_user_id(update: Update, context: CallbackContext) -> int:
    user_id = update.message.text
    context.user_data['change_role_user_id'] = user_id
    await update.message.reply_text(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:")
    return ROLE_NEW_ROLE


async def change_role_new_role(update: Update, context: CallbackContext) -> int:
    new_role = update.message.text
    user_id = context.user_data.get('change_role_user_id')
    current_user_id = update.message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_role = get_user_role(update.message.from_user.id)

    if new_role == "developer" or new_role == "admin":
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏ —Ö–æ—á–µ—Ç –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å developer –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if admin_role == "admin":
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
            update_user_role(update.message.from_user.id, "removed")
            await update.message.reply_text(
                "–í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ –ø–æ–ø—ã—Ç–∫—É –¥–∞—Ç—å —Ä–æ–ª—å –≤—ã—Å–æ–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return ConversationHandler.END

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏ —Ö–æ—á–µ—Ç –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å developer –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ú—ã —Ç–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–µ–ª–∏ –¥–∞—Ç—å —Ä–æ–ª—å
        if get_user_role(int(user_id)) == "developer":
            update_user_role(int(user_id), "removed")
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏–Ω—è—Ç—å —Ä–æ–ª—å developer.")
            await start(update, context)
            return ConversationHandler.END
    if admin_role == 'admin' and  get_user_role(int(user_id)) == "developer":
        update_user_role(int(current_user_id), "removed")
        await update.message.reply_text(f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ –ø–æ–ø—ã—Ç–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ developer.")
        await start(update, context)
        return ConversationHandler.END


    try:
        user_id = int(user_id)
        update_user_role(user_id, new_role)
        await update.message.reply_text(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role}.")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    return ConversationHandler.END





async def delete_user_start(update: Update, context: CallbackContext) -> int:
    if get_user_role(update.message.from_user.id) != "developer":
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return DELETE_USER


async def delete_user_main(update: Update, context: CallbackContext) -> int:
    user_id = update.message.text

    try:
        user_id = int(user_id)
        delete_user(user_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    return ConversationHandler.END


async def list_users(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    roles = get_user_role(user_id)
    if roles == 'developer'  or roles == 'admin':
        users = get_all_users()
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user in users:
            response += f"ID: {user[0]}, Telegram: {user[1]}, Nick_Name: {user[2]}, Dostup: {user[3]}, Server:{user[4]}\n"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ")




async def back_to_main(update: Update, context: CallbackContext) -> None:
    await start(update, context)


def main() -> None:
    init_db()

    application = Application.builder().token(API_KEY).build()

    report_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞üìñ$") & admin_d, date_from_report)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_from_report)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_to_report)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, nicknames_report)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    invite_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–∏–Ω—è—Ç–∏–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—éüö™$") , date_from_invites)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_from_invites)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_to_invites)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, nicknames_invites)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    uval_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–≤–æ–ª—å–Ω–µ–Ω–∏—è —Å —Ñ—Ä–∞–∫—Ü–∏–∏‚úèÔ∏è$"), date_from_uval)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_from_uval)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_to_uval)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, nicknames_uval)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    online_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–Ω–ª–∞–π–Ω‚è∞$"), online_check_start)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, online_date_from)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, online_date_to)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, online_nicknames)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    trade_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ü§ë$'), trade_check_start)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_date_from)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_date_to)],
            NICKNAMES: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_nicknames)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    gospay_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å —Ñ—Ä–∞–∫—Ü–∏–∏üí∂$'), gos_start)],
        states={
            DATE_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_from_gos)],
            DATE_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, date_to_gos)],
            FRACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fraction)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    register_handler = ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_nickname)],
            SERVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register_server)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    delete_user_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüö´$") , delete_user_start)],
        states={
            DELETE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_user_main)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    set_dostup = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç—É–øüîê$"), change_role_start)],
        states={
            ROLE_USER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_role_user_id)],
            ROLE_NEW_ROLE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, change_role_new_role)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )


    check_handler = get_conversation_handler()
    account_handler = accountc_handler()
    accban_handler = accountcc_handler()

    application.add_handler(accban_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîß$"), manage_accounts))
    application.add_handler(MessageHandler(filters.Regex("^–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏üîê$"), for_adm_acc_button))
    application.add_handler(MessageHandler(filters.Regex("^–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë®‚Äçüë®‚Äçüëß‚Äçüë¶$"), list_users))
    application.add_handler(register_handler)
    application.add_handler(MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back_to_main))
    application.add_handler(MessageHandler(filters.Regex("^–î–ª—è —Å–ª–µ–¥—è—â–∏—Ö‚ò†Ô∏è$"), sled_button))
    application.add_handler(MessageHandler(filters.Regex("^–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ü§ñ$"), for_account_button))
    application.add_handler(MessageHandler(filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤1Ô∏è‚É£3Ô∏è‚É£$'), acc_start))
    application.add_handler(MessageHandler(filters.Regex('^–í—ã–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤üìñ$'), send_file))
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫üóí$"), list_pending_users)],
        states={},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    application.add_handler(CallbackQueryHandler(button_callback))

    application.add_handler(delete_user_handler)
    application.add_handler(invite_handler)
    application.add_handler(uval_handler)
    application.add_handler(report_handler)
    application.add_handler(online_handler)
    application.add_handler(trade_handler)
    application.add_handler(check_handler)
    application.add_handler(account_handler)
    application.add_handler(accban_handler)
    application.add_handler(set_dostup)
    application.add_handler(gospay_handler)

    application.run_polling()


if __name__ == "__main__":
    main()
